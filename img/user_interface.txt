/*****************************************************************
//
//  NAME:         David Rickards
//
//  HOMEWORK:     Project1
//
//  CLASS:        ICS 212
//
//  INSTRUCTOR:   Ravi Narayan
//
//  DATE:         October 22, 2022
//
//  FILE:         user_interface.c
//
//  DESCRIPTION:  A bank interface that allows users to add,
//                delete, find, and print recordd, and exit 
//                within the visual interface. 
//
//  REFERENCES:   TA - Kyle Berney
//
****************************************************************/

#include <stdio.h>

#include <string.h>

#include "record.h"

#include "database.h"

void getaddress (char[] , int);

int option_validation(char*, char*);

int getaccount();

void getname(char[], int);

int debug_mode = 0;

/*****************************************************************
//
//  Function name: main
//
//  DESCRIPTION:   Prints a bank user interface that allow the user
//                 to add, delete, print, and find records through
//                 the use of other functions. Users may also exit
//                 the interface.
//
//  Parameters:    argc (int) : number of arguments
//                 argv (char*[]): array of arguments  
//
//  Return values:  0 : success
//
****************************************************************/
int main(int agrc, char* argv[])
{
    struct record* start = NULL;

    int account = 0, quit = 0, valid = 0, run_program = 0, result;

    char input[100], name[30], address[60];

    char* filename = "database.txt";

    if (agrc == 1)
    {
        run_program = 1;
    }
    else if(agrc == 2 && strcmp(argv[1], "debug") == 0)
    {
        debug_mode = 1;

        run_program = 1;
    }
    else
    {
        printf("\n\nERROR!!! Only acceptable excutable name : homework3  or homework3 debug for debug mode.\nProgram will not run. Try again.");
    }


    if(run_program == 1)
    {
        readfile(&start, filename);

        printf("\nHello and thank you for choose out application!\nFor use option and commands please read the following bleow.");

        do
        {
            printf("\n\n-_-_--_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_");

            printf("\nTo select an option please type out the name of the operation below and hit enter:\n");
            printf("add      :  Adds a new record into the database.\n");
            printf("printall :  Prints all records in the database.\n");
            printf("find     :  Prints all records with specified account number.\n");
            printf("delete   :  Deletes exsisting record(s) from the database using specified account number.\n");
            printf("quit     :  Quits the program.\n");

            valid = 0;

            while (valid == 0)
            {
                printf("Command : ");

                fgets(input, 100, stdin);

                if (option_validation(input, "add") == 1)
                {
                    account = getaccount();

                    getname(name, 30);

                    getaddress(address, 60);

                    addRecord(&start, account, name, address);

                    valid = 1;
                }
                else if (option_validation(input, "printall") == 1)
                {
                    printAllRecords(start);

                    valid = 1;
                }
                else if (option_validation(input, "find") == 1)
                {
                    printf("\nEnter account number to find below. ");

                    account = getaccount();

                    result = findRecord(start, account);

                    if (result == 0)
                    {
                        printf("\nFind  Complete. All record with given accoutn number have been print.");
                    }
                    else
                    {
                        printf("\nFind unsuccessful. No record found with that account number in database.");
                    }

                    valid = 1;
                }
                else if (option_validation(input, "delete") == 1)
                {
                    printf("\nEnter account number to delete below. ");

                    account = getaccount();

                    result = deleteRecord(&start, account);

                    if (result == 0)
                    {
                        printf("\nDelete Complete! All records with given account number have been removed.");
                    }
                    else
                    {
                        printf("\nDelete unsuccessful. No record found with that account number in database.");
                    }

                    valid = 1;
                }
                else if (option_validation(input, "quit") == 1)
                {
                    quit = 1;

                    valid = 1;
                }
                else
                {
                    printf("\nINVALID OPTION! Please make you type one of the above given options.\n");

                    printf("\n(You may also enter a shorter version of the command)\n");
                }

            }
        }
        while (quit != 1);

        writefile(start, filename);

        cleanup(&start);
    }
    return 0;
}


/*****************************************************************
//
//  Function name:  getaddress
//
//  DESCRIPTION:    Gets the account address from the user.
//
//  Parameters:     address (char[]) : address of account
//                  array_size (int): size of array  
//
//  Return values:  None
//
****************************************************************/
void getaddress(char address[], int array_size)
{
    int i = 0, exit = 0, clean = 0;

    char buffer_cleaner = ' ';

    if(debug_mode == 1)
    {
        printf("\n(DEBUGGING)  getaddress was called");
    }

    printf("\nEnter account address :  ");

    while(i < array_size && exit == 0)
    {
        address[i] = fgetc(stdin);

        if(debug_mode == 1)
        {
            printf("\n(DEBUGGING)  address[%d] = %c", i, address[i]);
        }

        if(address[i] == 59)
        {
            address[i] = '\0';

            buffer_cleaner = getchar();

            clean = 1;

            exit = 1;
        }

        i++;
    }

    if (clean != 1)
    {
        address[59] = '\0';

        while ((buffer_cleaner = fgetc(stdin)) != 59);

        fgetc(stdin);
    }

    if (debug_mode == 1)
    {
        printf("(\nDEBUGGING) address = %s \n", address);
    }
}

/*****************************************************************
//
//  Function name:  option_validation
//
//  DESCRIPTION:    Compares the users input to the options
//                  given and returns result.
//
//  Parameters:     option (char[]) : address of account
//                  input (int): size of array  
//
//  Return values:  valid : the result of the compare
//
****************************************************************/
int option_validation(char* input, char* option)
{
    int result = 0, wrong = 0, i, input_size, option_size;

    input_size = strlen(input) - 1;

    option_size = strlen(option);

    if(debug_mode == 1)
    {
        printf("\n(DEBUGGING)  input_size = %d & input = %s", input_size, input);

        printf("(DEBUGGING)  option = %s & option_size = %d\n", option, option_size);
    }

    if(input_size <= option_size)
    {
        for(i = 0; i < input_size; i++)
       {
            if (debug_mode == 1)
            {
                printf("(DEBIGGING)  intput[%d] = %c  & option[%d] = %c \n",i ,input[i], i, option[i]);
            }

            if (input[i] == option[i] && wrong == 0)
            {
                result = 1;
            }
            else
            {
                wrong = 1;
                result = 0;
            }
        }
    }

    return result;
}

/*****************************************************************
//
//  Function name:  getaccount
//
//  DESCRIPTION:    Gets the account number from the user.
//
//  Parameters:     account (int) : account number
//
//  Return values:  account : the account number
//
****************************************************************/
int getaccount()
{
    int account = 0;

    int scanner_result = 0;

    char scanner_cleaner[100];

    if(debug_mode == 1)
    {
        printf("\n\n(DEBUGGING)  getaccount was called");
    }

    while (account < 1)
    {
        printf("\nEnter account number: ");

        scanner_result = scanf("%d", &account);

        if (scanner_result == 0 || account <= 0)
        {
            account = 0;

            printf("\nInvalid input given.  Please enter a positive integer as the account number");
        }

        fgets(scanner_cleaner, 100, stdin);
    }
    if (debug_mode == 1)
    {
        printf("(DEBUGGING)  account = %d\n", account);
    }

  return account;
}

/****************************************************************
//
//  Function name:  getname
//
//  DESCRIPTION:    Gets the account name from the user.
//
//  Parameters:     name (char[]) : name of account
//                  
//  Return values:  None
//

****************************************************************/
void getname(char name[], int array_size)
{
    int length;

    char buffer_cleaner[1000];

    if(debug_mode == 1)
    {
        printf("\n\n(DEBUGGING)  getname was called");
    }

    printf("\nEnter account name: ");

    fgets(name, array_size, stdin);

    length = strlen(name);

    if (length >= array_size - 1)
    {
        name[array_size - 1] = '\0';

        fgets(buffer_cleaner, 1000, stdin);
    }
    else
    {
        name[length - 1] = '\0';
    }

    if(debug_mode == 1)
    {
        printf("(DEBUGGING)  name = %s\n", name);
    }
}

                                                                                                                                                                                                                                                                                                                                                                                                                                  393,0-1       Bot